#version 450
#define PI 3.1415926538

layout(std140, binding = 0) uniform UniformBufferObject {
    mat4 model;
    mat4 view;
    mat4 proj;
    float deltaTime;

    vec4 amplitudes;         // x -> wave amplitude
    vec4 directions[3];      // direction vectors (only directions[0] used)
    vec4 wavelengths;        // x -> wavelength
    vec4 speeds;             // x -> wave speed
    float time;
} ubo;

struct Particle {
    vec4 position;
    vec4 velocity;  // velocity.y holds the original Y-position
    vec4 color;
};

layout(std140, binding = 1) readonly buffer ParticleSSBOIn {
    Particle particlesIn[];
};

layout(std140, binding = 2) buffer ParticleSSBOOut {
    Particle particlesOut[];
};

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main() {
    uint index = gl_GlobalInvocationID.x;
    Particle particle = particlesIn[index];

    float originalY = particle.velocity.y;  // Retrieve stored Y
    float amplitude = 0.01;
    float frequency = 1.0;
    float phaseOffset = originalY * 90.0;

    // Wave as a function of fixed Y and time
    float wave = amplitude * sin(2.0 * PI * frequency * ubo.time + phaseOffset);

    // Oscillate around fixed Y
    particle.position.y = originalY + wave;

    particlesOut[index] = particle;
}
