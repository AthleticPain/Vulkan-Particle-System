#version 450

layout(std140, binding = 0) uniform UniformBufferObject {
    mat4 model;
    mat4 view;
    mat4 proj;
    float deltaTime;
} ubo;

struct Particle {
    vec4 position;
    vec4 velocity;
    vec4 color;
};

layout(std140, binding = 1) readonly buffer ParticleSSBOIn {
    Particle particlesIn[];
};

layout(std140, binding = 2) buffer ParticleSSBOOut {
    Particle particlesOut[];
};

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main() {
    uint index = gl_GlobalInvocationID.x;
    
    // Read input
    Particle particle = particlesIn[index];
    
    // Apply velocity in all 3 dimensions
    particle.position += particle.velocity * ubo.deltaTime;
    
    // Boundary handling with damping for all axes
    float boundary = 0.95;
    float damping = 0.95;
    
    if (abs(particle.position.x) > boundary) {
        particle.position.x = boundary * sign(particle.position.x);
        particle.velocity.x *= -damping;
    }
    if (abs(particle.position.y) > boundary) {
        particle.position.y = boundary * sign(particle.position.y);
        particle.velocity.y *= -damping;
    }
    if (abs(particle.position.z) > boundary) {
        particle.position.z = boundary * sign(particle.position.z);
        particle.velocity.z *= -damping;
    }
    
    // Write back
    particlesOut[index] = particle;
}