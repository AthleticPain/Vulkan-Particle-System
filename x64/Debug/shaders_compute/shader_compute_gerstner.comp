#version 450
#define PI 3.1415926538

layout(std140, binding = 0) uniform UniformBufferObject {
    mat4 model;
    mat4 view;
    mat4 proj;
    float deltaTime;

    vec4 amplitudes;         // x,y,z for 3 waves
    vec4 directions[4];      // direction vectors for 3 waves
    vec4 wavelengths;        // x,y,z for 3 waves
    vec4 speeds;             // x,y,z for 3 waves
    float time;
} ubo;

struct Particle {
    vec4 position;
    vec4 velocity;  // velocity.y holds the original Y-position
    vec4 color;
};

layout(std140, binding = 1) readonly buffer ParticleSSBOIn {
    Particle particlesIn[];
};

layout(std140, binding = 2) buffer ParticleSSBOOut {
    Particle particlesOut[];
};

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main() {
    uint index = gl_GlobalInvocationID.x;
    Particle particle = particlesIn[index];

    // Use original Y as base height
    float baseY = particle.velocity.y;
    float totalWave = 0.0;
    
    // Wave 1
    vec2 dir1 = normalize(ubo.directions[0].xy);
    float wavelength1 = ubo.wavelengths.x;
    float amplitude1 = ubo.amplitudes.x;
    float speed1 = ubo.speeds.x;
    float frequency1 = 2.0 * PI / wavelength1;
    float phase1 = dot(dir1, particle.position.xz);
    totalWave += amplitude1 * sin(frequency1 * phase1 + speed1 * ubo.time);
    
    // Wave 2
    vec2 dir2 = normalize(ubo.directions[1].xy);
    float wavelength2 = ubo.wavelengths.y;
    float amplitude2 = ubo.amplitudes.y;
    float speed2 = ubo.speeds.y;
    float frequency2 = 2.0 * PI / wavelength2;
    float phase2 = dot(dir2, particle.position.xz);
    totalWave += amplitude2 * sin(frequency2 * phase2 + speed2 * ubo.time);
    
    // Wave 3
    vec2 dir3 = normalize(ubo.directions[2].xy);
    float wavelength3 = ubo.wavelengths.z;
    float amplitude3 = ubo.amplitudes.z;
    float speed3 = ubo.speeds.z;
    float frequency3 = 2.0 * PI / wavelength3;
    float phase3 = dot(dir3, particle.position.xz);
    totalWave += amplitude3 * sin(frequency3 * phase3 + speed3 * ubo.time);

    // Wave 4
    vec2 dir4 = normalize(ubo.directions[3].xy);
    float wavelength4 = ubo.wavelengths.z;
    float amplitude4 = ubo.amplitudes.z;
    float speed4 = ubo.speeds.z;
    float frequency4 = 2.0 * PI / wavelength3;
    float phase4 = dot(dir4, particle.position.xz);
    totalWave += amplitude4 * sin(frequency4 * phase4 + speed4 * ubo.time);

    // Apply the combined wave effect
    particle.position.y = baseY + totalWave;

    particlesOut[index] = particle;
}